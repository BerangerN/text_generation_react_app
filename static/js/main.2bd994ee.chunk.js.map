{"version":3,"sources":["components/Title.js","containers/Selection.js","containers/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","Typography","component","variant","color","gutterBottom","children","Selection","state","classes","this","speakerId","handleSelectLength","isLoading","fixedHeightDates","clsx","paper","Grid","container","spacing","item","xs","md","lg","Paper","elevation","className","ButtonGroup","size","disabled","fullWidth","Button","onClick","direction","justify","alignItems","src","process","alt","width","Component","dico","require","Microbe","align","role","aria-label","Dashboard","handleInputChange","ev","a","target","value","name","setState","length","new_text","text","loadingGeneration","deconstructed_text","i","last_trigram","slice","join","random_index","Math","floor","random","push","shift","handleChangeSpeaker","errorSearch","fixedHeightPaperResults","fixedHeightResults","root","CssBaseline","content","appBarSpacer","Container","maxWidth","CircularProgress","Box","pt","withStyles","theme","display","toolbar","paddingRight","title","flexGrow","mixins","height","overflow","paddingTop","paddingBottom","padding","flexDirection","fixedHeight","minHeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bd994ee.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\n\nexport default function Title(props) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.node,\n};\n","import React, { Component } from 'react'\nimport clsx from 'clsx';\n\nimport { Grid, Paper, Button, ButtonGroup } from '@material-ui/core'\n\nimport Title from '../components/Title'\n\nclass Selection extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            \n        }\n    }\n\n    render() {\n        const classes = this.props.classes\n        const { speakerId, /*handleChangeSpeaker,*/ handleSelectLength, isLoading } = this.props\n        const fixedHeightDates = clsx(classes.paper, classes.fixedHeightDates);\n\n        return (\n            <Grid container spacing={3}>\n                <Grid item xs={12} md={9} lg={9}>\n                    <Paper elevation={0} className={fixedHeightDates}>\n                    <Title>Nombre de mots</Title>\n                        <ButtonGroup \n                            size=\"large\" \n                            color=\"primary\" \n                            disabled={isLoading}\n                            fullWidth={true}\n                        >\n                            <Button onClick={()=>handleSelectLength(100)} >100</Button>\n                            <Button onClick={()=>handleSelectLength(500)} >500</Button>\n                            <Button onClick={()=>handleSelectLength(1000)} >1000</Button>\n                            <Button onClick={()=>handleSelectLength(5000)} >5000</Button>\n                            <Button onClick={()=>handleSelectLength(10000)} >10000</Button>\n                        </ButtonGroup>\n                    </Paper>\n                </Grid>\n              <Grid item xs={12} md={3} lg={3}>\n                    <Paper elevation={0} className={fixedHeightDates}>\n                        \n                        <Title>Speaker</Title>\n                        \n                        <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"space-around\"\n                        alignItems=\"center\"\n                        >\n                            <Grid item>\n                                <img src={`${process.env.PUBLIC_URL}/emacron.jpg`} alt=\"emacron\" width={speakerId === 0 ? 120 : 80}></img>\n                            </Grid>\n                            <Grid item>\n                                <img src={`${process.env.PUBLIC_URL}/dtrump.jpg`} alt=\"dtrump\" width={speakerId === 1 ? 120 : 80}></img>\n                            </Grid>\n                        \n                        </Grid>\n                    </Paper>\n                </Grid>\n   \n\n            </Grid>\n        )\n    }\n\n}\n\nexport default Selection\n","import React, { Component } from 'react'\nimport clsx from 'clsx'\n\nimport { withStyles } from \"@material-ui/core/styles\"\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport Box from '@material-ui/core/Box'\n\nimport Typography from '@material-ui/core/Typography'\n\nimport Container from '@material-ui/core/Container'\n\nimport { Paper, CircularProgress } from '@material-ui/core'\n\nimport Selection from './Selection'\n\nconst dico = require(`../result.json`)\n\n\nfunction Microbe() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            Made with <span role=\"img\" aria-label=\"virus\"> ðŸ¦  </span> by Big Ben\n\n        </Typography>\n    );\n}\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    title: {\n        flexGrow: 1,\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        minHeight: 150,\n    },\n    fixedHeightResults: {\n        minHeight: 50,\n    },\n})\n\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            text: 'SÃ©lectionnez un nombre de mots  ', \n            speakerId: 0,\n            loadingGeneration: false,\n            errorSearch: ''\n        }\n    }\n\n    handleInputChange = async ev => {\n        const { value, name } = ev.target\n        this.setState({ [name]: value })\n    }\n\n    handleSelectLength = length => {\n        const new_text = `GÃ©nÃ©ration d'un discours de ${length} mots...`\n        this.setState({ text: new_text, loadingGeneration: true })\n\n        const deconstructed_text = ['START', 'START', 'START']\n        \n        let i = 0\n        while(i<length){\n            const last_trigram = deconstructed_text.slice(-3).join(' ')\n\n            const random_index = Math.floor((Math.random() * dico[last_trigram].length))\n            \n            deconstructed_text.push(dico[last_trigram][random_index])\n            if(dico[last_trigram][random_index] === 'END'){\n                break;\n            }\n            i += 1\n        }\n        deconstructed_text.shift()\n        deconstructed_text.shift()\n        deconstructed_text.shift()\n\n        this.setState({ text: deconstructed_text.join(' '), loadingGeneration: false })\n    }\n\n    handleChangeSpeaker = () => {\n\n    }\n\n\n\n    render() {\n        const { classes } = this.props\n        const { speakerId, loadingGeneration, text } = this.state\n\n        //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight)\n        const fixedHeightPaperResults = clsx(classes.paper, classes.fixedHeightResults)\n\n        return (\n            <div className={classes.root}>\n                <CssBaseline />\n\n                <main className={classes.content}>\n\n                    <div className={classes.appBarSpacer} />\n\n                    <Container maxWidth=\"lg\" className={classes.container}>\n                    <Selection classes={classes}\n                            isLoading={loadingGeneration}\n                            speakerId={speakerId}\n                            handleChangeSpeaker={this.handleChangeSpeaker}\n                            handleSelectLength={this.handleSelectLength}\n                        />\n\n                        <br />\n                        <br />\n                        <Paper className={fixedHeightPaperResults}>\n                        <Typography component=\"p\" variant=\"h6\">\n                            {text}\n                        </Typography>\n                        \n                            \n                            {loadingGeneration &&\n                                <CircularProgress />\n                            }\n                        </Paper>\n                        <br/>\n                        \n                        <Box pt={4}>\n                            <Microbe />\n                        </Box>\n                    </Container>\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(Dashboard)\n","import React from 'react';\n\nimport './App.css';\n\nimport Dashboard from './containers/Dashboard'\n \nfunction App() {\n  return (\n    <div className=\"App\">\n        <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}